// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  PETANI
  SUPLIER
}

// MODEL USER YANG DIPERBARUI
model User {
  id            String    @id @default(cuid())
  name          String // <-- DIUBAH MENJADI WAJIB (TIDAK ADA LAGI TANDA TANYA)
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String? // Password tetap ada untuk login credentials
  role          Role      @default(PETANI)
  location      String?
  phone         String?
  ktpSiupUrl    String?

  // Relasi yang dibutuhkan oleh NextAuth dan aplikasi Anda
  accounts Account[]
  sessions Session[]
  products Product[] // Jika role-nya SUPLIER
  orders   Order[] // Jika role-nya PETANI
  reviews  Review[]
}

// --- MODEL-MODEL BARU YANG DIBUTUHKAN OLEH NEXTAUTH ---

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// --- MODEL APLIKASI ANDA (TETAP SAMA) ---

model Product {
  id          String      @id @default(cuid())
  name        String
  description String
  price       Float
  stock       Int
  imageUrl    String
  suplier     User        @relation(fields: [suplierId], references: [id])
  suplierId   String
  reviews     Review[]
  orderItems  OrderItem[]
}

model Order {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now())
  status      String
  totalAmount Float
  petani      User        @relation(fields: [petaniId], references: [id])
  petaniId    String
  orderItems  OrderItem[]
}

model OrderItem {
  id        String  @id @default(cuid())
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model Review {
  id        String  @id @default(cuid())
  rating    Int
  comment   String?
  product   Product @relation(fields: [productId], references: [id])
  productId String
  user      User    @relation(fields: [userId], references: [id])
  userId    String
}
