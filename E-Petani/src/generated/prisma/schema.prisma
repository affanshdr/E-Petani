generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id         String     @id @default(uuid())
  name       String
  email      String     @unique
  password   String
  role       Role       @default(USER)
  profile    Profile?
  posts      Post[]
  chatsSent  Chat[]     @relation("SentMessages")
  chatsRecv  Chat[]     @relation("ReceivedMessages")
  activities Activity[]
  products   Product[]  @relation("UserProducts")
  orders     Order[]    @relation("UserOrders")
  comments   Comment[]
  createdAt  DateTime   @default(now())
}

model Profile {
  id       String  @id @default(uuid())
  userId   String  @unique
  user     User    @relation(fields: [userId], references: [id])
  photoUrl String?
  bio      String?
  follower Int     @default(0)
}

model Product {
  id         String      @id @default(uuid())
  name       String
  category   String
  price      Float
  imageUrl   String?
  sellerId   String
  seller     User        @relation("UserProducts", fields: [sellerId], references: [id])
  stock      Int
  orderItems OrderItem[]
  createdAt  DateTime    @default(now())
}

model Order {
  id         String      @id @default(uuid())
  userId     String
  user       User        @relation("UserOrders", fields: [userId], references: [id])
  status     OrderStatus
  items      OrderItem[]
  totalPrice Float
  createdAt  DateTime    @default(now())
}

model OrderItem {
  id        String @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float

  product Product @relation(fields: [productId], references: [id])
  order   Order   @relation(fields: [orderId], references: [id])
}

model Chat {
  id         String   @id @default(uuid())
  senderId   String
  receiverId String
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  message    String
  timestamp  DateTime @default(now())
}

model Activity {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  action    String
  createdAt DateTime @default(now())
}

model Post {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  description String
  imageUrl    String?
  likes       Int       @default(0)
  comments    Comment[]
  createdAt   DateTime  @default(now())
}

model Comment {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  content   String
  createdAt DateTime @default(now())
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  DELIVERED
  CANCELLED
}
